/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, } from '@angular/core';
/**
 * If the window isn't scrollable, then place this on the scrollable container that draggable elements are inside. e.g.
 * ```html
 * <div style="overflow: scroll" mwlDraggableScrollContainer>
 * <div mwlDraggable>Drag me!</div>
 * </div>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
var DraggableScrollContainerDirective = /** @class */ (function () {
    /**
     * @hidden
     */
    function DraggableScrollContainerDirective(elementRef) {
        this.elementRef = elementRef;
        /**
         * Trigger the DragStart after a long touch in scrollable container when true
         * @deprecated will be removed in v5 (use [touchStartLongPress]="{delay: 300, delta: 30}" on the mwlDraggable element instead)
         */
        this.activeLongPressDrag = false;
        /**
         * Configuration of a long touch
         * Duration in ms of a long touch before activating DragStart
         * Delta of the
         * @deprecated will be removed in v5 (use [touchStartLongPress]="{delay: 300, delta: 30}" on the mwlDraggable element instead)
         */
        this.longPressConfig = { duration: 300, delta: 30 };
    }
    /** @nocollapse */
    DraggableScrollContainerDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    DraggableScrollContainerDirective.propDecorators = {
        activeLongPressDrag: [{ type: Input }],
        longPressConfig: [{ type: Input }]
    };
DraggableScrollContainerDirective.ɵfac = function DraggableScrollContainerDirective_Factory(t) { return new (t || DraggableScrollContainerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DraggableScrollContainerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DraggableScrollContainerDirective, selectors: [["", "mwlDraggableScrollContainer", ""]], inputs: { activeLongPressDrag: "activeLongPressDrag", longPressConfig: "longPressConfig" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DraggableScrollContainerDirective, [{
        type: Directive,
        args: [{
                selector: '[mwlDraggableScrollContainer]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { activeLongPressDrag: [{
            type: Input
        }], longPressConfig: [{
            type: Input
        }] }); })();
    return DraggableScrollContainerDirective;
}());
export { DraggableScrollContainerDirective };
if (false) {
    /**
     * Trigger the DragStart after a long touch in scrollable container when true
     * @deprecated will be removed in v5 (use [touchStartLongPress]="{delay: 300, delta: 30}" on the mwlDraggable element instead)
     * @type {?}
     */
    DraggableScrollContainerDirective.prototype.activeLongPressDrag;
    /**
     * Configuration of a long touch
     * Duration in ms of a long touch before activating DragStart
     * Delta of the
     * @deprecated will be removed in v5 (use [touchStartLongPress]="{delay: 300, delta: 30}" on the mwlDraggable element instead)
     * @type {?}
     */
    DraggableScrollContainerDirective.prototype.longPressConfig;
    /** @type {?} */
    DraggableScrollContainerDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZ2dhYmxlLXNjcm9sbC1jb250YWluZXIuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovYW5ndWxhci1kcmFnZ2FibGUtZHJvcHBhYmxlL2xpYi9kcmFnZ2FibGUtc2Nyb2xsLWNvbnRhaW5lci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssR0FJTixNQUFNLGVBQWUsQ0FBQztBQUN2QjtBQUNHO0FBQ29IO0FBQzdHO0FBRVY7QUFBb0M7QUFFcEM7QUFDQzs7QUFDRDtBQUdRLElBZU47QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLDJDQUFtQixVQUFtQztBQUFJLFFBQXZDLGVBQVUsR0FBVixVQUFVLENBQXlCO0FBQUM7QUFFbkQ7QUFBc0Y7QUFBdUk7QUFBWSxRQWZwTyx3QkFBbUIsR0FBWSxLQUFLLENBQUM7QUFDaEQ7QUFFSztBQUNNO0FBQ007QUFDTTtBQUVBO0FBQVksUUFBeEIsb0JBQWUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQzFELElBSTJELENBQUMsQUFsQm5EO0FBQUM7OENBSFQsU0FBUyxTQUFDLGhFQUdzQjtRQUYvQixRQUFRLEVBQUUsbEJBSTRDLGdCQXBCdEQsVUFBVTtBQUNYO1VBZTBDLG1CQUMxQyw3QkFmQztBQUtELHNDQWdCRSxLQUFLO0FBQUssa0NBUVYsS0FBSztBQUFJOzs7Ozs7Ozs7Ozs7b0JBQU07QUFBQyxJQU1uQix3Q0FBQztBQUNBLENBREEsQUF0QkQsSUFzQkM7QUFDRCxTQXBCYSxpQ0FBaUM7QUFDN0M7QUFDTztBQUFRO0FBQ0U7QUFFSjtBQUFpQjtBQUFRLElBQXJDLGdFQUE4QztBQUNoRDtBQUVDO0FBQ0U7QUFDRTtBQUNFO0FBRUo7QUFBaUI7QUFBUSxJQUExQiw0REFBd0Q7QUFDMUQ7QUFHQyxJQUNhLHVEQUEwQzs7QUF0Q0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBVUEsQUFrQkEsQUFFQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFiQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBckJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFqQkEsQUFBQSxBQXVCQSxBQUFBLEFBUUEsQUFBQSxBQU1BLEFBQUEsQUFBQSxBQXRCQSxBQXNCQSxBQW5CQSxBQUFBLEFBS0EsQUFBQSxBQVFBLEFBQUEsQUFLQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPbkluaXQsXG4gIFJlbmRlcmVyMixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogSWYgdGhlIHdpbmRvdyBpc24ndCBzY3JvbGxhYmxlLCB0aGVuIHBsYWNlIHRoaXMgb24gdGhlIHNjcm9sbGFibGUgY29udGFpbmVyIHRoYXQgZHJhZ2dhYmxlIGVsZW1lbnRzIGFyZSBpbnNpZGUuIGUuZy5cbiAqIGBgYGh0bWxcbiAgPGRpdiBzdHlsZT1cIm92ZXJmbG93OiBzY3JvbGxcIiBtd2xEcmFnZ2FibGVTY3JvbGxDb250YWluZXI+XG4gICAgPGRpdiBtd2xEcmFnZ2FibGU+RHJhZyBtZSE8L2Rpdj5cbiAgPC9kaXY+XG4gIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbXdsRHJhZ2dhYmxlU2Nyb2xsQ29udGFpbmVyXScsXG59KVxuZXhwb3J0IGNsYXNzIERyYWdnYWJsZVNjcm9sbENvbnRhaW5lckRpcmVjdGl2ZSB7XG4gIC8qKlxuICAgKiBUcmlnZ2VyIHRoZSBEcmFnU3RhcnQgYWZ0ZXIgYSBsb25nIHRvdWNoIGluIHNjcm9sbGFibGUgY29udGFpbmVyIHdoZW4gdHJ1ZVxuICAgKiBAZGVwcmVjYXRlZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjUgKHVzZSBbdG91Y2hTdGFydExvbmdQcmVzc109XCJ7ZGVsYXk6IDMwMCwgZGVsdGE6IDMwfVwiIG9uIHRoZSBtd2xEcmFnZ2FibGUgZWxlbWVudCBpbnN0ZWFkKVxuICAgKi9cbiAgQElucHV0KCkgYWN0aXZlTG9uZ1ByZXNzRHJhZzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIG9mIGEgbG9uZyB0b3VjaFxuICAgKiBEdXJhdGlvbiBpbiBtcyBvZiBhIGxvbmcgdG91Y2ggYmVmb3JlIGFjdGl2YXRpbmcgRHJhZ1N0YXJ0XG4gICAqIERlbHRhIG9mIHRoZVxuICAgKiBAZGVwcmVjYXRlZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjUgKHVzZSBbdG91Y2hTdGFydExvbmdQcmVzc109XCJ7ZGVsYXk6IDMwMCwgZGVsdGE6IDMwfVwiIG9uIHRoZSBtd2xEcmFnZ2FibGUgZWxlbWVudCBpbnN0ZWFkKVxuICAgKi9cbiAgQElucHV0KCkgbG9uZ1ByZXNzQ29uZmlnID0geyBkdXJhdGlvbjogMzAwLCBkZWx0YTogMzAgfTtcblxuICAvKipcbiAgICogQGhpZGRlblxuICAgKi9cbiAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KSB7fVxufVxuIl19