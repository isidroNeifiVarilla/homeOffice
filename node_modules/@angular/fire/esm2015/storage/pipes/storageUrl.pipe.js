import { AsyncPipe } from '@angular/common';
import { ChangeDetectorRef, NgModule, Pipe } from '@angular/core';
import { AngularFireStorage } from '../storage';
/** to be used with in combination with | async */
import * as ɵngcc0 from '@angular/core';
export class GetDownloadURLPipe {
    constructor(storage, cdr) {
        this.storage = storage;
        this.asyncPipe = new AsyncPipe(cdr);
    }
    transform(path) {
        if (path !== this.path) {
            this.path = path;
            this.downloadUrl$ = this.storage.ref(path).getDownloadURL();
        }
        return this.asyncPipe.transform(this.downloadUrl$);
    }
    ngOnDestroy() {
        this.asyncPipe.ngOnDestroy();
    }
}
GetDownloadURLPipe.ɵfac = function GetDownloadURLPipe_Factory(t) { return new (t || GetDownloadURLPipe)(ɵngcc0.ɵɵdirectiveInject(AngularFireStorage), ɵngcc0.ɵɵinjectPipeChangeDetectorRef()); };
GetDownloadURLPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "getDownloadURL", type: GetDownloadURLPipe, pure: false });
/** @nocollapse */
GetDownloadURLPipe.ctorParameters = () => [
    { type: AngularFireStorage },
    { type: ChangeDetectorRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GetDownloadURLPipe, [{
        type: Pipe,
        args: [{
                name: 'getDownloadURL',
                pure: false
            }]
    }], function () { return [{ type: AngularFireStorage }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();
export class GetDownloadURLPipeModule {
}
GetDownloadURLPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GetDownloadURLPipeModule });
GetDownloadURLPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function GetDownloadURLPipeModule_Factory(t) { return new (t || GetDownloadURLPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GetDownloadURLPipeModule, { declarations: [GetDownloadURLPipe], exports: [GetDownloadURLPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GetDownloadURLPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [GetDownloadURLPipe],
                exports: [GetDownloadURLPipe]
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZVVybC5waXBlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvc3RvcmFnZS9waXBlcy9zdG9yYWdlVXJsLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQWEsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUU1RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFaEQsa0RBQWtEOztBQUtsRCxNQUFNLE9BQU8sa0JBQWtCO0FBQUcsSUFNaEMsWUFBb0IsT0FBMkIsRUFBRSxHQUFzQjtBQUN6RSxRQURzQixZQUFPLEdBQVAsT0FBTyxDQUFvQjtBQUFDLFFBQzlDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDeEMsSUFBRSxDQUFDO0FBQ0gsSUFDRSxTQUFTLENBQUMsSUFBWTtBQUN4QixRQUFJLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDNUIsWUFBTSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUN2QixZQUFNLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDbEUsU0FBSztBQUNMLFFBQUksT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDdkQsSUFBRSxDQUFDO0FBQ0gsSUFDRSxXQUFXO0FBQ2IsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ2pDLElBQUUsQ0FBQztBQUNIOzhDQXpCQyxJQUFJLFNBQUMsa0JBQ0osSUFBSSxFQUFFLGdCQUFnQixrQkFDdEIsSUFBSSxFQUFFLEtBQUssZUFDWjtrSEFDSTtBQUFDO0FBQW1CO0FBQTRDLFlBUDVELGtCQUFrQjtBQUFJLFlBRnRCLGlCQUFpQjtBQUFHOzs7Ozs7O2dIQUFFO0FBcUMvQixNQUFNLE9BQU8sd0JBQXdCO0FBQUc7b0RBSnZDLFFBQVEsU0FBQyxrQkFDUjtNQUFZLEVBQUUsQ0FBRSxrQkFBa0IsQ0FBRSxrQkFDcEMsT0FBTyxFQUFFLENBQUUsa0JBQWtCLENBQUUsZUFDaEM7Ozs7Ozs7OztBQXJDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQU1BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXhCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFOQSxBQUFBLEFBRkEsQUFBQSxBQXFDQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBOZ01vZHVsZSwgT25EZXN0cm95LCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBbmd1bGFyRmlyZVN0b3JhZ2UgfSBmcm9tICcuLi9zdG9yYWdlJztcblxuLyoqIHRvIGJlIHVzZWQgd2l0aCBpbiBjb21iaW5hdGlvbiB3aXRoIHwgYXN5bmMgKi9cbkBQaXBlKHtcbiAgbmFtZTogJ2dldERvd25sb2FkVVJMJyxcbiAgcHVyZTogZmFsc2UsXG59KVxuZXhwb3J0IGNsYXNzIEdldERvd25sb2FkVVJMUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0sIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSBhc3luY1BpcGU6IEFzeW5jUGlwZTtcbiAgcHJpdmF0ZSBwYXRoOiBzdHJpbmc7XG4gIHByaXZhdGUgZG93bmxvYWRVcmwkOiBPYnNlcnZhYmxlPGFueT47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yYWdlOiBBbmd1bGFyRmlyZVN0b3JhZ2UsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICB0aGlzLmFzeW5jUGlwZSA9IG5ldyBBc3luY1BpcGUoY2RyKTtcbiAgfVxuXG4gIHRyYW5zZm9ybShwYXRoOiBzdHJpbmcpIHtcbiAgICBpZiAocGF0aCAhPT0gdGhpcy5wYXRoKSB7XG4gICAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgICAgdGhpcy5kb3dubG9hZFVybCQgPSB0aGlzLnN0b3JhZ2UucmVmKHBhdGgpLmdldERvd25sb2FkVVJMKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFzeW5jUGlwZS50cmFuc2Zvcm0odGhpcy5kb3dubG9hZFVybCQpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5hc3luY1BpcGUubmdPbkRlc3Ryb3koKTtcbiAgfVxuXG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogWyBHZXREb3dubG9hZFVSTFBpcGUgXSxcbiAgZXhwb3J0czogWyBHZXREb3dubG9hZFVSTFBpcGUgXSxcbn0pXG5leHBvcnQgY2xhc3MgR2V0RG93bmxvYWRVUkxQaXBlTW9kdWxlIHt9XG4iXX0=