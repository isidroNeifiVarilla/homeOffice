import { Inject, Injectable, InjectionToken, NgZone, Optional, PLATFORM_ID } from '@angular/core';
import { EMPTY, Observable, of } from 'rxjs';
import { map, shareReplay, switchMap, tap } from 'rxjs/operators';
import { FirebaseApp, ɵapplyMixins, ɵlazySDKProxy } from '@angular/fire';
import { isPlatformBrowser } from '@angular/common';
import { proxyPolyfillCompat } from './base';
import { ɵfetchInstance } from '@angular/fire';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire";
// SEMVER @ v6, drop and move core ng metrics to a service
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/fire';
export const AUTOMATICALLY_TRACE_CORE_NG_METRICS = new InjectionToken('angularfire2.performance.auto_trace');
export const INSTRUMENTATION_ENABLED = new InjectionToken('angularfire2.performance.instrumentationEnabled');
export const DATA_COLLECTION_ENABLED = new InjectionToken('angularfire2.performance.dataCollectionEnabled');
export class AngularFirePerformance {
    constructor(app, instrumentationEnabled, dataCollectionEnabled, zone, 
    // tslint:disable-next-line:ban-types
    platformId) {
        this.zone = zone;
        this.performance = of(undefined).pipe(switchMap(() => isPlatformBrowser(platformId) ? zone.runOutsideAngular(() => import('firebase/performance')) : EMPTY), map(() => ɵfetchInstance(`performance`, 'AngularFirePerformance', app, () => {
            const performance = zone.runOutsideAngular(() => app.performance());
            if (instrumentationEnabled === false) {
                performance.instrumentationEnabled = false;
            }
            if (dataCollectionEnabled === false) {
                performance.dataCollectionEnabled = false;
            }
            return performance;
        }, [instrumentationEnabled, dataCollectionEnabled])), shareReplay({ bufferSize: 1, refCount: false }));
        return ɵlazySDKProxy(this, this.performance, zone);
    }
}
AngularFirePerformance.ɵfac = function AngularFirePerformance_Factory(t) { return new (t || AngularFirePerformance)(ɵngcc0.ɵɵinject(ɵngcc1.FirebaseApp), ɵngcc0.ɵɵinject(INSTRUMENTATION_ENABLED, 8), ɵngcc0.ɵɵinject(DATA_COLLECTION_ENABLED, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PLATFORM_ID)); };
/** @nocollapse */ AngularFirePerformance.ɵprov = i0.ɵɵdefineInjectable({ factory: function AngularFirePerformance_Factory() { return new AngularFirePerformance(i0.ɵɵinject(i1.FirebaseApp), i0.ɵɵinject(INSTRUMENTATION_ENABLED, 8), i0.ɵɵinject(DATA_COLLECTION_ENABLED, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.PLATFORM_ID)); }, token: AngularFirePerformance, providedIn: "any" });
/** @nocollapse */
AngularFirePerformance.ctorParameters = () => [
    { type: FirebaseApp },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [INSTRUMENTATION_ENABLED,] }] },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [DATA_COLLECTION_ENABLED,] }] },
    { type: NgZone },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFirePerformance, [{
        type: Injectable,
        args: [{
                providedIn: 'any'
            }]
    }], function () { return [{ type: ɵngcc1.FirebaseApp }, { type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [INSTRUMENTATION_ENABLED]
            }] }, { type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DATA_COLLECTION_ENABLED]
            }] }, { type: ɵngcc0.NgZone }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
const trace$ = (traceId) => {
    if (typeof window !== 'undefined' && window.performance) {
        const entries = window.performance.getEntriesByName(traceId, 'measure') || [];
        const startMarkName = `_${traceId}Start[${entries.length}]`;
        const endMarkName = `_${traceId}End[${entries.length}]`;
        return new Observable(emitter => {
            window.performance.mark(startMarkName);
            emitter.next();
            return {
                unsubscribe: () => {
                    window.performance.mark(endMarkName);
                    window.performance.measure(traceId, startMarkName, endMarkName);
                }
            };
        });
    }
    else {
        return EMPTY;
    }
};
const ɵ0 = trace$;
export const traceUntil = (name, test, options) => (source$) => new Observable(subscriber => {
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap(a => test(a) && traceSubscription.unsubscribe(), () => {
    }, () => options && options.orComplete && traceSubscription.unsubscribe())).subscribe(subscriber);
});
export const traceWhile = (name, test, options) => (source$) => new Observable(subscriber => {
    let traceSubscription;
    return source$.pipe(tap(a => {
        if (test(a)) {
            traceSubscription = traceSubscription || trace$(name).subscribe();
        }
        else {
            if (traceSubscription) {
                traceSubscription.unsubscribe();
            }
            traceSubscription = undefined;
        }
    }, () => {
    }, () => options && options.orComplete && traceSubscription && traceSubscription.unsubscribe())).subscribe(subscriber);
});
export const traceUntilComplete = (name) => (source$) => new Observable(subscriber => {
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap(() => {
    }, () => {
    }, () => traceSubscription.unsubscribe())).subscribe(subscriber);
});
export const traceUntilFirst = (name) => (source$) => new Observable(subscriber => {
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap(() => traceSubscription.unsubscribe(), () => {
    }, () => {
    })).subscribe(subscriber);
});
export const trace = (name) => (source$) => new Observable(subscriber => {
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap(() => traceSubscription.unsubscribe(), () => {
    }, () => traceSubscription.unsubscribe())).subscribe(subscriber);
});
ɵapplyMixins(AngularFirePerformance, [proxyPolyfillCompat]);
export { ɵ0 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,