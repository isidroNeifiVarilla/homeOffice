/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Configuration service, provides default values for the AccordionComponent.
 */
import * as ɵngcc0 from '@angular/core';
var AccordionConfig = /** @class */ (function () {
    function AccordionConfig() {
        /**
         * Whether the other panels should be closed when a panel is opened
         */
        this.closeOthers = false;
        /**
         * turn on/off animation
         */
        this.isAnimated = false;
    }
    /** @nocollapse */ AccordionConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function AccordionConfig_Factory() { return new AccordionConfig(); }, token: AccordionConfig, providedIn: "root" });
AccordionConfig.ɵfac = function AccordionConfig_Factory(t) { return new (t || AccordionConfig)(); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AccordionConfig, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return AccordionConfig;
}());
export { AccordionConfig };
if (false) {
    /**
     * Whether the other panels should be closed when a panel is opened
     * @type {?}
     */
    AccordionConfig.prototype.closeOthers;
    /**
     * turn on/off animation
     * @type {?}
     */
    AccordionConfig.prototype.isAnimated;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmNvbmZpZy5qcyIsInNvdXJjZXMiOlsibmc6L25neC1ib290c3RyYXAvYWNjb3JkaW9uL2FjY29yZGlvbi5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7QUFFZ0M7QUFBSTtBQUdsQjs7QUFEbEI7QUFHYSxJQUhiO0FBQ2U7QUFFWjtBQUM2QztBQUFZLFFBQzFELGdCQUFXLEdBQVksS0FBSyxDQUFDO0FBQy9CO0FBQVk7QUFDRTtBQUFZLFFBQXhCLGVBQVUsR0FBWSxLQUFLLENBQUM7QUFDOUIsS0FBQyxBQUxRO21EQUhSLFVBQVUsU0FBQyxzQkFDVixVQUFVLEVBQUUsTUFBTSxrQkFDbkIsaElBQ1M7Ozs7Ozs7Z0RBTUw7QUFBQywwQkFkTjtBQUFFLENBYUQsQUFSRCxJQVFDO0FBQ0QsU0FOYSxlQUFlO0FBQzNCO0FBQWE7QUFBUTtBQUNGO0FBQ2Y7QUFBUSxJQURYLHNDQUE2QjtBQUMvQjtBQUFRO0FBQ0Y7QUFBaUI7QUFDdkIsSUFERSxxQ0FBNEI7O0FBWkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBUkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQVBBLEFBYUEsQUFSQSxBQVFBLEFBTEEsQUFBQSxBQUVBLEFBQUEsQUFFQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gc2VydmljZSwgcHJvdmlkZXMgZGVmYXVsdCB2YWx1ZXMgZm9yIHRoZSBBY2NvcmRpb25Db21wb25lbnQuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEFjY29yZGlvbkNvbmZpZyB7XG4gIC8qKiBXaGV0aGVyIHRoZSBvdGhlciBwYW5lbHMgc2hvdWxkIGJlIGNsb3NlZCB3aGVuIGEgcGFuZWwgaXMgb3BlbmVkICovXG4gIGNsb3NlT3RoZXJzOiBCb29sZWFuID0gZmFsc2U7XG4gIC8qKiB0dXJuIG9uL29mZiBhbmltYXRpb24gKi9cbiAgaXNBbmltYXRlZDogQm9vbGVhbiA9IGZhbHNlO1xufVxuIl19