/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Default values provider for typeahead
 */
import * as ɵngcc0 from '@angular/core';
export class TypeaheadConfig {
    constructor() {
        /**
         * sets use adaptive position
         */
        this.adaptivePosition = false;
        /**
         * turn on/off animation
         */
        this.isAnimated = false;
        /**
         * used to hide results on blur
         */
        this.hideResultsOnBlur = true;
        /**
         * if true, typeahead will cancel async request on blur
         */
        this.cancelRequestOnFocusLost = false;
        /**
         * used to choose the first item in typeahead container
         */
        this.selectFirstItem = true;
        /**
         * used to active/inactive the first item in typeahead container
         */
        this.isFirstItemActive = true;
        /**
         * used to choose set minimal no of characters that needs to
         * be entered before typeahead kicks-in
         */
        this.minLength = 1;
    }
}
TypeaheadConfig.ɵfac = function TypeaheadConfig_Factory(t) { return new (t || TypeaheadConfig)(); };
/** @nocollapse */ TypeaheadConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function TypeaheadConfig_Factory() { return new TypeaheadConfig(); }, token: TypeaheadConfig, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TypeaheadConfig, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
if (false) {
    /**
     * sets use adaptive position
     * @type {?}
     */
    TypeaheadConfig.prototype.adaptivePosition;
    /**
     * turn on/off animation
     * @type {?}
     */
    TypeaheadConfig.prototype.isAnimated;
    /**
     * used to hide results on blur
     * @type {?}
     */
    TypeaheadConfig.prototype.hideResultsOnBlur;
    /**
     * if true, typeahead will cancel async request on blur
     * @type {?}
     */
    TypeaheadConfig.prototype.cancelRequestOnFocusLost;
    /**
     * used to choose the first item in typeahead container
     * @type {?}
     */
    TypeaheadConfig.prototype.selectFirstItem;
    /**
     * used to active/inactive the first item in typeahead container
     * @type {?}
     */
    TypeaheadConfig.prototype.isFirstItemActive;
    /**
     * used to choose set minimal no of characters that needs to
     * be entered before typeahead kicks-in
     * @type {?}
     */
    TypeaheadConfig.prototype.minLength;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWFoZWFkLmNvbmZpZy5qcyIsInNvdXJjZXMiOlsibmc6L25neC1ib290c3RyYXAvdHlwZWFoZWFkL3R5cGVhaGVhZC5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7QUFDb0M7QUFBSTtBQUd2Qzs7QUFDRCxNQUFNLE9BQU8sZUFBZTtBQUM1QixJQUpBO0FBQ0U7QUFBWTtBQUVjO0FBQ25CLFFBQ1AscUJBQWdCLEdBQUcsS0FBSyxDQUFDO0FBQzNCO0FBQVk7QUFDRTtBQUNWLFFBREYsZUFBVSxHQUFHLEtBQUssQ0FBQztBQUNyQjtBQUFZO0FBQ0U7QUFBWSxRQUF4QixzQkFBaUIsR0FBRyxJQUFJLENBQUM7QUFDM0I7QUFBWTtBQUNFO0FBQVksUUFBeEIsNkJBQXdCLEdBQUcsS0FBSyxDQUFDO0FBQ25DO0FBQVk7QUFDRTtBQUNkLFFBREUsb0JBQWUsR0FBRyxJQUFJLENBQUM7QUFDekI7QUFBWTtBQUNFO0FBQVksUUFBeEIsc0JBQWlCLEdBQUcsSUFBSSxDQUFDO0FBQzNCO0FBQVk7QUFDSztBQUdqQjtBQUNVLFFBRlIsY0FBUyxHQUFHLENBQUMsQ0FBQztBQUNoQixLQUFDO0FBQ0Q7MkNBckJDLFVBQVUsU0FBQyxrQkFDVixVQUFVLEVBQUUsTUFBTSxFQUVmO1dBREosWEFDSzs7Ozs7O2dEQU1NO0FBQUM7QUFBYTtBQUNwQjtBQUFrQztBQUFpQjtBQUN0RCxJQU5ELDJDQUF5QjtBQUMzQjtBQUFRO0FBQ0Y7QUFDTDtBQUFRLElBRFAscUNBQW1CO0FBQ3JCO0FBQVE7QUFDRjtBQUFpQjtBQUNwQixJQURELDRDQUF5QjtBQUMzQjtBQUFRO0FBQ0Y7QUFBaUI7QUFBUSxJQUE3QixtREFBaUM7QUFDbkM7QUFBUTtBQUNGO0FBQWlCO0FBQ2xCLElBREgsMENBQXVCO0FBQ3pCO0FBQVE7QUFDRjtBQUFpQjtBQUNwQixJQURELDRDQUF5QjtBQUMzQjtBQUFRO0FBQ0M7QUFFSjtBQUVGO0FBQVEsSUFGVCxvQ0FBYzs7QUF0QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU1BLEFBQUEsQUFBQSxBQUFBLEFBSEEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFwQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUdBLEFBQUEsQUFFQSxBQUFBLEFBRUEsQUFBQSxBQUVBLEFBQUEsQUFFQSxBQUFBLEFBRUEsQUFBQSxBQUlBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKiBEZWZhdWx0IHZhbHVlcyBwcm92aWRlciBmb3IgdHlwZWFoZWFkICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBUeXBlYWhlYWRDb25maWcge1xuICAvKiogc2V0cyB1c2UgYWRhcHRpdmUgcG9zaXRpb24gKi9cbiAgYWRhcHRpdmVQb3NpdGlvbiA9IGZhbHNlO1xuICAvKiogdHVybiBvbi9vZmYgYW5pbWF0aW9uICovXG4gIGlzQW5pbWF0ZWQgPSBmYWxzZTtcbiAgLyoqIHVzZWQgdG8gaGlkZSByZXN1bHRzIG9uIGJsdXIgKi9cbiAgaGlkZVJlc3VsdHNPbkJsdXIgPSB0cnVlO1xuICAvKiogaWYgdHJ1ZSwgdHlwZWFoZWFkIHdpbGwgY2FuY2VsIGFzeW5jIHJlcXVlc3Qgb24gYmx1ciAqL1xuICBjYW5jZWxSZXF1ZXN0T25Gb2N1c0xvc3QgPSBmYWxzZTtcbiAgLyoqIHVzZWQgdG8gY2hvb3NlIHRoZSBmaXJzdCBpdGVtIGluIHR5cGVhaGVhZCBjb250YWluZXIgKi9cbiAgc2VsZWN0Rmlyc3RJdGVtID0gdHJ1ZTtcbiAgLyoqIHVzZWQgdG8gYWN0aXZlL2luYWN0aXZlIHRoZSBmaXJzdCBpdGVtIGluIHR5cGVhaGVhZCBjb250YWluZXIgKi9cbiAgaXNGaXJzdEl0ZW1BY3RpdmUgPSB0cnVlO1xuICAvKiogdXNlZCB0byBjaG9vc2Ugc2V0IG1pbmltYWwgbm8gb2YgY2hhcmFjdGVycyB0aGF0IG5lZWRzIHRvXG4gICAqIGJlIGVudGVyZWQgYmVmb3JlIHR5cGVhaGVhZCBraWNrcy1pblxuICAgKi9cbiAgbWluTGVuZ3RoID0gMTtcbn1cbiJdfQ==